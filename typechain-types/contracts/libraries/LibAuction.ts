/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace LibAsset {
  export type AssetStruct = {
    assetType: BigNumberish;
    contractAddress: AddressLike;
    assetId: BigNumberish;
    assetAmount: BigNumberish;
  };

  export type AssetStructOutput = [
    assetType: bigint,
    contractAddress: string,
    assetId: bigint,
    assetAmount: bigint
  ] & {
    assetType: bigint;
    contractAddress: string;
    assetId: bigint;
    assetAmount: bigint;
  };
}

export declare namespace LibAuction {
  export type AuctionStruct = {
    maker: AddressLike;
    asset: LibAsset.AssetStruct;
    startPrice: BigNumberish;
    buyNowPrice: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    salt: BigNumberish;
    signature: BytesLike;
  };

  export type AuctionStructOutput = [
    maker: string,
    asset: LibAsset.AssetStructOutput,
    startPrice: bigint,
    buyNowPrice: bigint,
    startTime: bigint,
    endTime: bigint,
    salt: bigint,
    signature: string
  ] & {
    maker: string;
    asset: LibAsset.AssetStructOutput;
    startPrice: bigint;
    buyNowPrice: bigint;
    startTime: bigint;
    endTime: bigint;
    salt: bigint;
    signature: string;
  };
}

export interface LibAuctionInterface extends Interface {
  getFunction(nameOrSignature: "hash"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "hash",
    values: [LibAuction.AuctionStruct]
  ): string;

  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
}

export interface LibAuction extends BaseContract {
  connect(runner?: ContractRunner | null): LibAuction;
  waitForDeployment(): Promise<this>;

  interface: LibAuctionInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  hash: TypedContractMethod<
    [auction: LibAuction.AuctionStruct],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "hash"
  ): TypedContractMethod<[auction: LibAuction.AuctionStruct], [string], "view">;

  filters: {};
}
