/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AssetTransferAgentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "marketplace"
      | "owner"
      | "renounceOwnership"
      | "setMarketplace"
      | "transferERC1155"
      | "transferERC20"
      | "transferERC721"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ERC1155BatchTransferred"
      | "ERC1155Transferred"
      | "ERC20Transferred"
      | "ERC721Transferred"
      | "OwnershipTransferred"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "marketplace",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketplace",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC1155",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC20",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferERC721",
    values: [AddressLike, AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "marketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketplace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC1155",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ERC1155BatchTransferredEvent {
  export type InputTuple = [
    token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    tokenIds: BigNumberish[],
    amounts: BigNumberish[]
  ];
  export type OutputTuple = [
    token: string,
    from: string,
    to: string,
    tokenIds: bigint[],
    amounts: bigint[]
  ];
  export interface OutputObject {
    token: string;
    from: string;
    to: string;
    tokenIds: bigint[];
    amounts: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC1155TransferredEvent {
  export type InputTuple = [
    token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    from: string,
    to: string,
    tokenId: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    token: string;
    from: string;
    to: string;
    tokenId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC20TransferredEvent {
  export type InputTuple = [
    token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    from: string,
    to: string,
    amount: bigint
  ];
  export interface OutputObject {
    token: string;
    from: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ERC721TransferredEvent {
  export type InputTuple = [
    token: AddressLike,
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    token: string,
    from: string,
    to: string,
    tokenId: bigint
  ];
  export interface OutputObject {
    token: string;
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AssetTransferAgent extends BaseContract {
  connect(runner?: ContractRunner | null): AssetTransferAgent;
  waitForDeployment(): Promise<this>;

  interface: AssetTransferAgentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  marketplace: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setMarketplace: TypedContractMethod<
    [_marketplace: AddressLike],
    [void],
    "nonpayable"
  >;

  transferERC1155: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  transferERC20: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferERC721: TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "marketplace"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMarketplace"
  ): TypedContractMethod<[_marketplace: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferERC1155"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      id: BigNumberish,
      amount: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferERC20"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      amount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferERC721"
  ): TypedContractMethod<
    [
      token: AddressLike,
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "ERC1155BatchTransferred"
  ): TypedContractEvent<
    ERC1155BatchTransferredEvent.InputTuple,
    ERC1155BatchTransferredEvent.OutputTuple,
    ERC1155BatchTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ERC1155Transferred"
  ): TypedContractEvent<
    ERC1155TransferredEvent.InputTuple,
    ERC1155TransferredEvent.OutputTuple,
    ERC1155TransferredEvent.OutputObject
  >;
  getEvent(
    key: "ERC20Transferred"
  ): TypedContractEvent<
    ERC20TransferredEvent.InputTuple,
    ERC20TransferredEvent.OutputTuple,
    ERC20TransferredEvent.OutputObject
  >;
  getEvent(
    key: "ERC721Transferred"
  ): TypedContractEvent<
    ERC721TransferredEvent.InputTuple,
    ERC721TransferredEvent.OutputTuple,
    ERC721TransferredEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;

  filters: {
    "ERC1155BatchTransferred(address,address,address,uint256[],uint256[])": TypedContractEvent<
      ERC1155BatchTransferredEvent.InputTuple,
      ERC1155BatchTransferredEvent.OutputTuple,
      ERC1155BatchTransferredEvent.OutputObject
    >;
    ERC1155BatchTransferred: TypedContractEvent<
      ERC1155BatchTransferredEvent.InputTuple,
      ERC1155BatchTransferredEvent.OutputTuple,
      ERC1155BatchTransferredEvent.OutputObject
    >;

    "ERC1155Transferred(address,address,address,uint256,uint256)": TypedContractEvent<
      ERC1155TransferredEvent.InputTuple,
      ERC1155TransferredEvent.OutputTuple,
      ERC1155TransferredEvent.OutputObject
    >;
    ERC1155Transferred: TypedContractEvent<
      ERC1155TransferredEvent.InputTuple,
      ERC1155TransferredEvent.OutputTuple,
      ERC1155TransferredEvent.OutputObject
    >;

    "ERC20Transferred(address,address,address,uint256)": TypedContractEvent<
      ERC20TransferredEvent.InputTuple,
      ERC20TransferredEvent.OutputTuple,
      ERC20TransferredEvent.OutputObject
    >;
    ERC20Transferred: TypedContractEvent<
      ERC20TransferredEvent.InputTuple,
      ERC20TransferredEvent.OutputTuple,
      ERC20TransferredEvent.OutputObject
    >;

    "ERC721Transferred(address,address,address,uint256)": TypedContractEvent<
      ERC721TransferredEvent.InputTuple,
      ERC721TransferredEvent.OutputTuple,
      ERC721TransferredEvent.OutputObject
    >;
    ERC721Transferred: TypedContractEvent<
      ERC721TransferredEvent.InputTuple,
      ERC721TransferredEvent.OutputTuple,
      ERC721TransferredEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
  };
}
