/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace LibSessionReceipt {
  export type SessionReceiptStruct = {
    client: AddressLike;
    node: AddressLike;
    totalSecondsServed: BigNumberish;
    tokenType: BigNumberish;
    tokenAddress: AddressLike;
    status: BigNumberish;
    nonce: BigNumberish;
  };

  export type SessionReceiptStructOutput = [
    client: string,
    node: string,
    totalSecondsServed: bigint,
    tokenType: bigint,
    tokenAddress: string,
    status: bigint,
    nonce: bigint
  ] & {
    client: string;
    node: string;
    totalSecondsServed: bigint;
    tokenType: bigint;
    tokenAddress: string;
    status: bigint;
    nonce: bigint;
  };
}

export interface SessionReceiptInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "confirmSessionReceipt"
      | "createSessionReceipt"
      | "getLatestReceipt"
      | "getNonce"
      | "getSessionReceipt"
      | "nodesStorage"
      | "owner"
      | "redeemReceipt"
      | "renounceOwnership"
      | "transferOwnership"
      | "usageDepositor"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OwnershipTransferred"
      | "SessionReceiptConfirmed"
      | "SessionReceiptCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "confirmSessionReceipt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createSessionReceipt",
    values: [AddressLike, BigNumberish, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestReceipt",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSessionReceipt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nodesStorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemReceipt",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "usageDepositor",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "confirmSessionReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createSessionReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSessionReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nodesStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemReceipt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usageDepositor",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionReceiptConfirmedEvent {
  export type InputTuple = [
    client: AddressLike,
    node: AddressLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [client: string, node: string, nonce: bigint];
  export interface OutputObject {
    client: string;
    node: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionReceiptCreatedEvent {
  export type InputTuple = [
    client: AddressLike,
    node: AddressLike,
    totalSecondsServed: BigNumberish,
    tokenAddress: AddressLike
  ];
  export type OutputTuple = [
    client: string,
    node: string,
    totalSecondsServed: bigint,
    tokenAddress: string
  ];
  export interface OutputObject {
    client: string;
    node: string;
    totalSecondsServed: bigint;
    tokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SessionReceipt extends BaseContract {
  connect(runner?: ContractRunner | null): SessionReceipt;
  waitForDeployment(): Promise<this>;

  interface: SessionReceiptInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  confirmSessionReceipt: TypedContractMethod<
    [nonce: BigNumberish],
    [void],
    "nonpayable"
  >;

  createSessionReceipt: TypedContractMethod<
    [
      client: AddressLike,
      totalSecondsServed: BigNumberish,
      tokenAddress: AddressLike,
      tokenType: BigNumberish,
      nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getLatestReceipt: TypedContractMethod<
    [client: AddressLike],
    [LibSessionReceipt.SessionReceiptStructOutput],
    "view"
  >;

  getNonce: TypedContractMethod<[client: AddressLike], [bigint], "view">;

  getSessionReceipt: TypedContractMethod<
    [client: AddressLike, nonce: BigNumberish],
    [LibSessionReceipt.SessionReceiptStructOutput],
    "view"
  >;

  nodesStorage: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  redeemReceipt: TypedContractMethod<
    [client: AddressLike, nonce: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  usageDepositor: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "confirmSessionReceipt"
  ): TypedContractMethod<[nonce: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createSessionReceipt"
  ): TypedContractMethod<
    [
      client: AddressLike,
      totalSecondsServed: BigNumberish,
      tokenAddress: AddressLike,
      tokenType: BigNumberish,
      nonce: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLatestReceipt"
  ): TypedContractMethod<
    [client: AddressLike],
    [LibSessionReceipt.SessionReceiptStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[client: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getSessionReceipt"
  ): TypedContractMethod<
    [client: AddressLike, nonce: BigNumberish],
    [LibSessionReceipt.SessionReceiptStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "nodesStorage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "redeemReceipt"
  ): TypedContractMethod<
    [client: AddressLike, nonce: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "usageDepositor"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SessionReceiptConfirmed"
  ): TypedContractEvent<
    SessionReceiptConfirmedEvent.InputTuple,
    SessionReceiptConfirmedEvent.OutputTuple,
    SessionReceiptConfirmedEvent.OutputObject
  >;
  getEvent(
    key: "SessionReceiptCreated"
  ): TypedContractEvent<
    SessionReceiptCreatedEvent.InputTuple,
    SessionReceiptCreatedEvent.OutputTuple,
    SessionReceiptCreatedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SessionReceiptConfirmed(address,address,uint256)": TypedContractEvent<
      SessionReceiptConfirmedEvent.InputTuple,
      SessionReceiptConfirmedEvent.OutputTuple,
      SessionReceiptConfirmedEvent.OutputObject
    >;
    SessionReceiptConfirmed: TypedContractEvent<
      SessionReceiptConfirmedEvent.InputTuple,
      SessionReceiptConfirmedEvent.OutputTuple,
      SessionReceiptConfirmedEvent.OutputObject
    >;

    "SessionReceiptCreated(address,address,uint256,address)": TypedContractEvent<
      SessionReceiptCreatedEvent.InputTuple,
      SessionReceiptCreatedEvent.OutputTuple,
      SessionReceiptCreatedEvent.OutputObject
    >;
    SessionReceiptCreated: TypedContractEvent<
      SessionReceiptCreatedEvent.InputTuple,
      SessionReceiptCreatedEvent.OutputTuple,
      SessionReceiptCreatedEvent.OutputObject
    >;
  };
}
