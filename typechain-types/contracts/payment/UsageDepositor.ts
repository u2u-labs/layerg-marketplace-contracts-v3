/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace LibUsageOrder {
  export type UsageOrderStruct = {
    client: AddressLike;
    tokenType: BigNumberish;
    tokenAddress: AddressLike;
    requestedSeconds: BigNumberish;
    nonce: BigNumberish;
    usageBillingAdminSig: BytesLike;
  };

  export type UsageOrderStructOutput = [
    client: string,
    tokenType: bigint,
    tokenAddress: string,
    requestedSeconds: bigint,
    nonce: bigint,
    usageBillingAdminSig: string
  ] & {
    client: string;
    tokenType: bigint;
    tokenAddress: string;
    requestedSeconds: bigint;
    nonce: bigint;
    usageBillingAdminSig: string;
  };
}

export interface UsageDepositorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addWhitelistedTokens"
      | "eip712Domain"
      | "getClientUsage"
      | "getNonce"
      | "getRewardPerSecond"
      | "owner"
      | "purchaseUsage"
      | "removeWhitelistedToken"
      | "renounceOwnership"
      | "setNodesStorage"
      | "setRewardPerSecond"
      | "setSessionReceiptContract"
      | "setUsageBillingAdmin"
      | "settleUsageToNode"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "OwnershipTransferred"
      | "UsagePurchased"
      | "UsageSettledToNode"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addWhitelistedTokens",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClientUsage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardPerSecond",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchaseUsage",
    values: [LibUsageOrder.UsageOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelistedToken",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNodesStorage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardPerSecond",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSessionReceiptContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsageBillingAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settleUsageToNode",
    values: [AddressLike, AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addWhitelistedTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClientUsage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRewardPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseUsage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelistedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNodesStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardPerSecond",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSessionReceiptContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUsageBillingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "settleUsageToNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UsagePurchasedEvent {
  export type InputTuple = [
    client: AddressLike,
    totalPrice: BigNumberish,
    usage: BigNumberish
  ];
  export type OutputTuple = [client: string, totalPrice: bigint, usage: bigint];
  export interface OutputObject {
    client: string;
    totalPrice: bigint;
    usage: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UsageSettledToNodeEvent {
  export type InputTuple = [
    client: AddressLike,
    node: AddressLike,
    totalServedUsage: BigNumberish,
    totalToken: BigNumberish
  ];
  export type OutputTuple = [
    client: string,
    node: string,
    totalServedUsage: bigint,
    totalToken: bigint
  ];
  export interface OutputObject {
    client: string;
    node: string;
    totalServedUsage: bigint;
    totalToken: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UsageDepositor extends BaseContract {
  connect(runner?: ContractRunner | null): UsageDepositor;
  waitForDeployment(): Promise<this>;

  interface: UsageDepositorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addWhitelistedTokens: TypedContractMethod<
    [tokens: AddressLike[]],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  getClientUsage: TypedContractMethod<[client: AddressLike], [bigint], "view">;

  getNonce: TypedContractMethod<[client: AddressLike], [bigint], "view">;

  getRewardPerSecond: TypedContractMethod<
    [token: AddressLike],
    [bigint],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  purchaseUsage: TypedContractMethod<
    [usageOrder: LibUsageOrder.UsageOrderStruct],
    [void],
    "payable"
  >;

  removeWhitelistedToken: TypedContractMethod<
    [token: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setNodesStorage: TypedContractMethod<
    [_nodesStorage: AddressLike],
    [void],
    "nonpayable"
  >;

  setRewardPerSecond: TypedContractMethod<
    [token: AddressLike, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  setSessionReceiptContract: TypedContractMethod<
    [_sessionReceiptContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setUsageBillingAdmin: TypedContractMethod<
    [_usageBillingAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  settleUsageToNode: TypedContractMethod<
    [
      client: AddressLike,
      node: AddressLike,
      totalServedUsage: BigNumberish,
      tokenAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addWhitelistedTokens"
  ): TypedContractMethod<[tokens: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClientUsage"
  ): TypedContractMethod<[client: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[client: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardPerSecond"
  ): TypedContractMethod<[token: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "purchaseUsage"
  ): TypedContractMethod<
    [usageOrder: LibUsageOrder.UsageOrderStruct],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "removeWhitelistedToken"
  ): TypedContractMethod<[token: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNodesStorage"
  ): TypedContractMethod<[_nodesStorage: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setRewardPerSecond"
  ): TypedContractMethod<
    [token: AddressLike, tokenAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setSessionReceiptContract"
  ): TypedContractMethod<
    [_sessionReceiptContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setUsageBillingAdmin"
  ): TypedContractMethod<
    [_usageBillingAdmin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "settleUsageToNode"
  ): TypedContractMethod<
    [
      client: AddressLike,
      node: AddressLike,
      totalServedUsage: BigNumberish,
      tokenAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "UsagePurchased"
  ): TypedContractEvent<
    UsagePurchasedEvent.InputTuple,
    UsagePurchasedEvent.OutputTuple,
    UsagePurchasedEvent.OutputObject
  >;
  getEvent(
    key: "UsageSettledToNode"
  ): TypedContractEvent<
    UsageSettledToNodeEvent.InputTuple,
    UsageSettledToNodeEvent.OutputTuple,
    UsageSettledToNodeEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "UsagePurchased(address,uint256,uint256)": TypedContractEvent<
      UsagePurchasedEvent.InputTuple,
      UsagePurchasedEvent.OutputTuple,
      UsagePurchasedEvent.OutputObject
    >;
    UsagePurchased: TypedContractEvent<
      UsagePurchasedEvent.InputTuple,
      UsagePurchasedEvent.OutputTuple,
      UsagePurchasedEvent.OutputObject
    >;

    "UsageSettledToNode(address,address,uint256,uint256)": TypedContractEvent<
      UsageSettledToNodeEvent.InputTuple,
      UsageSettledToNodeEvent.OutputTuple,
      UsageSettledToNodeEvent.OutputObject
    >;
    UsageSettledToNode: TypedContractEvent<
      UsageSettledToNodeEvent.InputTuple,
      UsageSettledToNodeEvent.OutputTuple,
      UsageSettledToNodeEvent.OutputObject
    >;
  };
}
