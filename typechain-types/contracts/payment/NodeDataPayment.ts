/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace LibPayment {
  export type PaymentStruct = {
    tokenType: BigNumberish;
    tokenAddress: AddressLike;
    unitPrice: BigNumberish;
  };

  export type PaymentStructOutput = [
    tokenType: bigint,
    tokenAddress: string,
    unitPrice: bigint
  ] & { tokenType: bigint; tokenAddress: string; unitPrice: bigint };
}

export declare namespace LibSession {
  export type SessionStruct = {
    node: AddressLike;
    payment: LibPayment.PaymentStruct;
    startTimestamp: BigNumberish;
    nonce: BigNumberish;
  };

  export type SessionStructOutput = [
    node: string,
    payment: LibPayment.PaymentStructOutput,
    startTimestamp: bigint,
    nonce: bigint
  ] & {
    node: string;
    payment: LibPayment.PaymentStructOutput;
    startTimestamp: bigint;
    nonce: bigint;
  };
}

export interface NodeDataPaymentInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "eip712Domain"
      | "endSession"
      | "getSession"
      | "nodesStorage"
      | "nonces"
      | "owner"
      | "renounceOwnership"
      | "setNodeStorage"
      | "setVault"
      | "startSession"
      | "transferOwnership"
      | "vault"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "OwnershipTransferred"
      | "SessionEnded"
      | "SessionStarted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endSession",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getSession",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "nodesStorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setNodeStorage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setVault",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startSession",
    values: [LibSession.SessionStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endSession", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSession", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nodesStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNodeStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVault", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startSession",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionEndedEvent {
  export type InputTuple = [
    node: AddressLike,
    client: AddressLike,
    timestamp: BigNumberish,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    node: string,
    client: string,
    timestamp: bigint,
    nonce: bigint
  ];
  export interface OutputObject {
    node: string;
    client: string;
    timestamp: bigint;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SessionStartedEvent {
  export type InputTuple = [
    node: AddressLike,
    client: AddressLike,
    timestamp: BigNumberish,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    node: string,
    client: string,
    timestamp: bigint,
    nonce: bigint
  ];
  export interface OutputObject {
    node: string;
    client: string;
    timestamp: bigint;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface NodeDataPayment extends BaseContract {
  connect(runner?: ContractRunner | null): NodeDataPayment;
  waitForDeployment(): Promise<this>;

  interface: NodeDataPaymentInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  endSession: TypedContractMethod<
    [client: AddressLike, usedDataAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getSession: TypedContractMethod<
    [client: AddressLike],
    [LibSession.SessionStructOutput],
    "view"
  >;

  nodesStorage: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setNodeStorage: TypedContractMethod<
    [_nodesStorage: AddressLike],
    [void],
    "nonpayable"
  >;

  setVault: TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;

  startSession: TypedContractMethod<
    [session: LibSession.SessionStruct, nodeSig: BytesLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vault: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "endSession"
  ): TypedContractMethod<
    [client: AddressLike, usedDataAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getSession"
  ): TypedContractMethod<
    [client: AddressLike],
    [LibSession.SessionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "nodesStorage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNodeStorage"
  ): TypedContractMethod<[_nodesStorage: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVault"
  ): TypedContractMethod<[_vault: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startSession"
  ): TypedContractMethod<
    [session: LibSession.SessionStruct, nodeSig: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vault"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "SessionEnded"
  ): TypedContractEvent<
    SessionEndedEvent.InputTuple,
    SessionEndedEvent.OutputTuple,
    SessionEndedEvent.OutputObject
  >;
  getEvent(
    key: "SessionStarted"
  ): TypedContractEvent<
    SessionStartedEvent.InputTuple,
    SessionStartedEvent.OutputTuple,
    SessionStartedEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "SessionEnded(address,address,uint256,uint256)": TypedContractEvent<
      SessionEndedEvent.InputTuple,
      SessionEndedEvent.OutputTuple,
      SessionEndedEvent.OutputObject
    >;
    SessionEnded: TypedContractEvent<
      SessionEndedEvent.InputTuple,
      SessionEndedEvent.OutputTuple,
      SessionEndedEvent.OutputObject
    >;

    "SessionStarted(address,address,uint256,uint256)": TypedContractEvent<
      SessionStartedEvent.InputTuple,
      SessionStartedEvent.OutputTuple,
      SessionStartedEvent.OutputObject
    >;
    SessionStarted: TypedContractEvent<
      SessionStartedEvent.InputTuple,
      SessionStartedEvent.OutputTuple,
      SessionStartedEvent.OutputObject
    >;
  };
}
