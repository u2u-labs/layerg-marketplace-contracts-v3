/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface INodesStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addNodes"
      | "getTotalValidNodes"
      | "getValidNodes"
      | "isValidNode"
      | "removeNode"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNodes",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalValidNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidNodes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeNode",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "addNodes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValidNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidNode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeNode", data: BytesLike): Result;
}

export interface INodesStorage extends BaseContract {
  connect(runner?: ContractRunner | null): INodesStorage;
  waitForDeployment(): Promise<this>;

  interface: INodesStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addNodes: TypedContractMethod<
    [_nodeAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  getTotalValidNodes: TypedContractMethod<[], [bigint], "view">;

  getValidNodes: TypedContractMethod<[], [string[]], "view">;

  isValidNode: TypedContractMethod<
    [nodeAddress: AddressLike],
    [boolean],
    "view"
  >;

  removeNode: TypedContractMethod<
    [nodeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addNodes"
  ): TypedContractMethod<[_nodeAddresses: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getTotalValidNodes"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getValidNodes"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isValidNode"
  ): TypedContractMethod<[nodeAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeNode"
  ): TypedContractMethod<[nodeAddress: AddressLike], [void], "nonpayable">;

  filters: {};
}
