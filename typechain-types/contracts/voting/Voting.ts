/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface VotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "nodeAdmin"
      | "nodeStorage"
      | "owner"
      | "quorumThresholdPercent"
      | "renounceOwnership"
      | "reportLogs"
      | "reportNode"
      | "reportedNodes"
      | "setNodeAdmin"
      | "setNodesStorage"
      | "transferOwnership"
      | "updateNodeStorage"
      | "updateQuorumThreshold"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "NodeRemoved"
      | "NodeReported"
      | "OwnershipTransferred"
      | "QuorumThresholdUpdated"
  ): EventFragment;

  encodeFunctionData(functionFragment: "nodeAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nodeStorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quorumThresholdPercent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reportLogs",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reportNode",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reportedNodes",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setNodeAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setNodesStorage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNodeStorage",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuorumThreshold",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "nodeAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nodeStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumThresholdPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reportLogs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reportNode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reportedNodes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNodeAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNodesStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNodeStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQuorumThreshold",
    data: BytesLike
  ): Result;
}

export namespace NodeRemovedEvent {
  export type InputTuple = [removedNode: AddressLike];
  export type OutputTuple = [removedNode: string];
  export interface OutputObject {
    removedNode: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NodeReportedEvent {
  export type InputTuple = [
    reporter: AddressLike,
    reportedNode: AddressLike,
    totalReports: BigNumberish
  ];
  export type OutputTuple = [
    reporter: string,
    reportedNode: string,
    totalReports: bigint
  ];
  export interface OutputObject {
    reporter: string;
    reportedNode: string;
    totalReports: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuorumThresholdUpdatedEvent {
  export type InputTuple = [newThresholdPercent: BigNumberish];
  export type OutputTuple = [newThresholdPercent: bigint];
  export interface OutputObject {
    newThresholdPercent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Voting extends BaseContract {
  connect(runner?: ContractRunner | null): Voting;
  waitForDeployment(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  nodeAdmin: TypedContractMethod<[], [string], "view">;

  nodeStorage: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  quorumThresholdPercent: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  reportLogs: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  reportNode: TypedContractMethod<
    [nodeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  reportedNodes: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  setNodeAdmin: TypedContractMethod<
    [_nodeAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  setNodesStorage: TypedContractMethod<
    [_nodeStorageAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateNodeStorage: TypedContractMethod<
    [newNodeStorage: AddressLike],
    [void],
    "nonpayable"
  >;

  updateQuorumThreshold: TypedContractMethod<
    [newPercent: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "nodeAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nodeStorage"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "quorumThresholdPercent"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reportLogs"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "reportNode"
  ): TypedContractMethod<[nodeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "reportedNodes"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "setNodeAdmin"
  ): TypedContractMethod<[_nodeAdmin: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setNodesStorage"
  ): TypedContractMethod<
    [_nodeStorageAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateNodeStorage"
  ): TypedContractMethod<[newNodeStorage: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateQuorumThreshold"
  ): TypedContractMethod<[newPercent: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "NodeRemoved"
  ): TypedContractEvent<
    NodeRemovedEvent.InputTuple,
    NodeRemovedEvent.OutputTuple,
    NodeRemovedEvent.OutputObject
  >;
  getEvent(
    key: "NodeReported"
  ): TypedContractEvent<
    NodeReportedEvent.InputTuple,
    NodeReportedEvent.OutputTuple,
    NodeReportedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "QuorumThresholdUpdated"
  ): TypedContractEvent<
    QuorumThresholdUpdatedEvent.InputTuple,
    QuorumThresholdUpdatedEvent.OutputTuple,
    QuorumThresholdUpdatedEvent.OutputObject
  >;

  filters: {
    "NodeRemoved(address)": TypedContractEvent<
      NodeRemovedEvent.InputTuple,
      NodeRemovedEvent.OutputTuple,
      NodeRemovedEvent.OutputObject
    >;
    NodeRemoved: TypedContractEvent<
      NodeRemovedEvent.InputTuple,
      NodeRemovedEvent.OutputTuple,
      NodeRemovedEvent.OutputObject
    >;

    "NodeReported(address,address,uint256)": TypedContractEvent<
      NodeReportedEvent.InputTuple,
      NodeReportedEvent.OutputTuple,
      NodeReportedEvent.OutputObject
    >;
    NodeReported: TypedContractEvent<
      NodeReportedEvent.InputTuple,
      NodeReportedEvent.OutputTuple,
      NodeReportedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "QuorumThresholdUpdated(uint256)": TypedContractEvent<
      QuorumThresholdUpdatedEvent.InputTuple,
      QuorumThresholdUpdatedEvent.OutputTuple,
      QuorumThresholdUpdatedEvent.OutputObject
    >;
    QuorumThresholdUpdated: TypedContractEvent<
      QuorumThresholdUpdatedEvent.InputTuple,
      QuorumThresholdUpdatedEvent.OutputTuple,
      QuorumThresholdUpdatedEvent.OutputObject
    >;
  };
}
